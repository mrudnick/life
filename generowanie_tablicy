-module(lifegame).
-export([create_table/1, test_avg/4]).
-record(field,{y= 0,x= 0,value= 0}).

neighbours_array() -> [{-1,0},{-1,-1},{0,-1},{1,-1},{1,0},{1,1},{0,1},{-1,1}].


% funkcje tworzące tablicę:

create_rows(1,0,Rozmiar,[H|T]) -> [H|T];
create_rows(Wiersz,0,Rozmiar, [H|T]) -> create_rows(Wiersz-1,Rozmiar-1,Rozmiar, [ [#field{y=Wiersz - 1, x= Rozmiar , value= 0} ] | [H|T]]);
create_rows(Wiersz,Kolumna,Rozmiar, [H|T]) -> create_rows(Wiersz,Kolumna-1,Rozmiar, [[#field{y= Wiersz, x= Kolumna , value=0}|H]|T]).

create_table(0) -> [];
create_table(N) -> create_rows(N,N-1,N,[[#field{x= N, y= N, value=0}]]).


% funkcja testująca:

test_avg(M, F, A, N) when N > 0 ->
    L = test_loop(M, F, A, N, []),
    Length = length(L),
    Min = lists:min(L),
    Max = lists:max(L),
    Med = lists:nth(round((Length / 2)), lists:sort(L)),
    Avg = round(lists:foldl(fun(X, Sum) -> X + Sum end, 0, L) / Length),
    io:format("Range: ~b - ~b mics~n"
          "Median: ~b mics~n"
          "Average: ~b mics~n",
          [Min, Max, Med, Avg]),
    Med.
 
test_loop(_M, _F, _A, 0, List) ->
    List;
test_loop(M, F, A, N, List) ->
    {T, _Result} = timer:tc(M, F, A),
    test_loop(M, F, A, N - 1, [T|List]).

